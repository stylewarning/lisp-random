(defun odd-map (f x y &optional default)
  (let* ((r (cons nil nil))
         (e r))
    (declare (dynamic-extent r))
    (labels ((dispatch (x y)
               (cond
                 ((and x y) (general x y))
                 (x         (left x))
                 (y         (right y))
                 (t         (finish))))
             (next (item)
               (rplacd e (cons item nil))
               (setf e (cdr e)))
             (general (x y)
               (next (funcall f (first x) (first y)))
               (dispatch (rest x) (rest y)))
             (left (x)
               (dolist (xi x)
                 (next (funcall f xi default)))
               (finish))
             (right (y)
               (dolist (yi y)
                 (next (funcall f default yi)))
               (finish))
             (finish ()
               (cdr r)))
      (dispatch x y))))

(defun test ()
  (assert (equal nil              (odd-map #'list nil nil 'x)))
  (assert (equal '((1 x) (2 x))   (odd-map #'list '(1 2) nil 'x)))
  (assert (equal '((x 1) (x 2))   (odd-map #'list nil '(1 2) 'x)))
  (assert (equal '((1 -1) (x -2)) (odd-map #'list '(1) '(-1 -2) 'x)))
  (assert (equal '((1 -1) (2 x))  (odd-map #'list '(1 2) '(-1) 'x))))
